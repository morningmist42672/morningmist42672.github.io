<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>STM32CubeMX 更新时无法勾选版本</title>
      <link href="/2024/07/29/STM32CubeMX-%E6%9B%B4%E6%96%B0%E6%97%B6%E6%97%A0%E6%B3%95%E5%8B%BE%E9%80%89%E7%89%88%E6%9C%AC/"/>
      <url>/2024/07/29/STM32CubeMX-%E6%9B%B4%E6%96%B0%E6%97%B6%E6%97%A0%E6%B3%95%E5%8B%BE%E9%80%89%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="0-系统说明及软硬件平台"><a href="#0-系统说明及软硬件平台" class="headerlink" title="0. 系统说明及软硬件平台"></a>0. 系统说明及软硬件平台</h2><p>操作系统：Windows 10 22H2</p><p>软件版本：</p><ul><li>旧的 STM32CubeMX 版本：Version 6.3.0</li><li>目标 STM32CubeMX 版本：Version 6.12.0</li></ul><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>同事的 STM32CubeMX 的版本比我的高，导致我无法打开他的工程，于是准备升级我的 STM32CubeMX。</p><p>打开 STM32CubeMX，进入更新页面。</p><p><img src="/../assets/STM32CubeMX-%E6%9B%B4%E6%96%B0%E6%97%B6%E6%97%A0%E6%B3%95%E5%8B%BE%E9%80%89%E7%89%88%E6%9C%AC/image-20240729161859470.png" alt="从 STM32CubeMX 进入更新页面"></p><p>但发现这个复选框不能勾选：</p><p><img src="/../assets/STM32CubeMX-%E6%9B%B4%E6%96%B0%E6%97%B6%E6%97%A0%E6%B3%95%E5%8B%BE%E9%80%89%E7%89%88%E6%9C%AC/image-20240729160945975.png" alt="STM32CubeMX 更新页面复选框无法勾选"></p><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h2><p>其实这里明确说了，下载更新包是需要 <em><strong>管理员权限</strong></em> 的，所以直接以管理员身份运行 STM32CubeMX，然后就会发现这个复选框可以勾选了。</p><p><img src="/../assets/STM32CubeMX-%E6%9B%B4%E6%96%B0%E6%97%B6%E6%97%A0%E6%B3%95%E5%8B%BE%E9%80%89%E7%89%88%E6%9C%AC/image-20240729161430846.png" alt="STM32CubeMX 更新需要管理员权限"></p>]]></content>
      
      
      <categories>
          
          <category> STM32CubeMX 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32CubeMX </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vivado 使用 Launch Vitis IDE 时出现报错</title>
      <link href="/2024/07/29/Vivado-%E4%BD%BF%E7%94%A8-Launch-Vitis-IDE-%E6%97%B6%E5%87%BA%E7%8E%B0%E6%8A%A5%E9%94%99/"/>
      <url>/2024/07/29/Vivado-%E4%BD%BF%E7%94%A8-Launch-Vitis-IDE-%E6%97%B6%E5%87%BA%E7%8E%B0%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h2 id="0-系统说明及软硬件平台"><a href="#0-系统说明及软硬件平台" class="headerlink" title="0. 系统说明及软硬件平台"></a>0. 系统说明及软硬件平台</h2><p>操作系统：Windows 10 22H2</p><p>软件版本：</p><ul><li>Vivado 2021.2</li><li>Vitis 2021.2</li></ul><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>学习 Zynq 开发时，兴冲冲地配置好了 Vivado 工程，准备打开 Vitis 进行软件部分的设计 。</p><p><img src="/../assets/Vivado-%E4%BD%BF%E7%94%A8-Launch-Vitis-IDE-%E6%97%B6%E5%87%BA%E7%8E%B0%E6%8A%A5%E9%94%99/1.png" alt="打开 Vitis"></p><p>然后发现出现以下报错：</p><p><img src="/../assets/Vivado-%E4%BD%BF%E7%94%A8-Launch-Vitis-IDE-%E6%97%B6%E5%87%BA%E7%8E%B0%E6%8A%A5%E9%94%99/2.png" alt="无法打开 Vitis"></p><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h2><p>经过一番研究，发现是因为本来就没有装 Vitis 导致的这个问题。这里解释一下，Vitis 和 Vitis HLS 是两个不同的东西，Vitis 是用来针对处理器进行软件开发的，而 Vitis HLS 是用高层次语言（如 C &#x2F; C++）为 PL（Programmable Logic）设计 IP 核，详情可以参考这篇帖子 <a href="https://support.xilinx.com/s/question/0D52E00006hpQc8SAE/vitis-vs-vitis-hls?language=en_US">Vitis vs Vitis HLS</a>[^1]。这里吐槽一下 Xilinx（现在应该叫 AMD Xilinx）的命名策略，误导性太强了(＃￣～￣＃)。</p><p>下面来安装 Vitis，首先打开 Vivado，进入下载界面：</p><p><img src="/../assets/Vivado-%E4%BD%BF%E7%94%A8-Launch-Vitis-IDE-%E6%97%B6%E5%87%BA%E7%8E%B0%E6%8A%A5%E9%94%99/3.png" alt="添加设计工具或器件"></p><p><img src="/../assets/Vivado-%E4%BD%BF%E7%94%A8-Launch-Vitis-IDE-%E6%97%B6%E5%87%BA%E7%8E%B0%E6%8A%A5%E9%94%99/4.png" alt="直接 next"></p><p>这里输入以下自己的 AMD Xilinx 账号，没有的可以注册一个。</p><p><img src="/../assets/Vivado-%E4%BD%BF%E7%94%A8-Launch-Vitis-IDE-%E6%97%B6%E5%87%BA%E7%8E%B0%E6%8A%A5%E9%94%99/5.png" alt="输入自己的 AMD Xilinx 账号"></p><p>选择 Upgrade Installation to 的 Vitis Unified Software Platform，然后 next。</p><p><img src="/../assets/Vivado-%E4%BD%BF%E7%94%A8-Launch-Vitis-IDE-%E6%97%B6%E5%87%BA%E7%8E%B0%E6%8A%A5%E9%94%99/6.png" alt="选择 Vitis Unified Software Platform"></p><p>为了防止后面再次出现需要安装新工具或器件的情况，我勾选了所有的选项。</p><p><img src="/../assets/Vivado-%E4%BD%BF%E7%94%A8-Launch-Vitis-IDE-%E6%97%B6%E5%87%BA%E7%8E%B0%E6%8A%A5%E9%94%99/7.png" alt="勾选所有选项"></p><p>看一下信息确认页面，确定没问题了就可以直接安装了。</p><p><img src="/../assets/Vivado-%E4%BD%BF%E7%94%A8-Launch-Vitis-IDE-%E6%97%B6%E5%87%BA%E7%8E%B0%E6%8A%A5%E9%94%99/8.png" alt="信息确认页面"></p><p>下载过程非常恶心，经常出现断连或者速度极慢的情况，建议采取以下措施：</p><ul><li>挂着梯子，当然非常耗流量，但又能怎么办呢╮(╯▽╰)╭。</li><li>关闭电脑的睡眠，具体怎么关搜一下就有很多，这里不再赘述。</li><li>尽量一直坐在电脑前守候着下载进程，出问题了还能及时补救一下，比如有时候下载失败了是需要手动点 Retry 的。</li></ul><p>当然就算这几点都做到了还是有可能下载失败，耐着性子多试几次吧。</p><p>还有一件事很奇怪，我在实验室的主机上，挂着这个下载进程一晚就下载好了，但在我自己的笔记本上试了好几次才成功下完，目前不知道原因是什么。不过我笔记本的配置比实验室主机差了很多，不知道这个有没有影响，暂不深究。</p><p><img src="/../assets/Vivado-%E4%BD%BF%E7%94%A8-Launch-Vitis-IDE-%E6%97%B6%E5%87%BA%E7%8E%B0%E6%8A%A5%E9%94%99/image-20240729174726308.png" alt="最终还是成功咯"></p><p>完成！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[^1]:<a href="https://support.xilinx.com/s/question/0D52E00006hpQc8SAE/vitis-vs-vitis-hls?language=en_US">Vitis vs Vitis HLS</a></p>]]></content>
      
      
      <categories>
          
          <category> Vivado 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vivado </tag>
            
            <tag> Vitis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用使用 Vivado + VSCode 进行 FPGA 开发</title>
      <link href="/2024/07/27/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/"/>
      <url>/2024/07/27/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="0-系统说明及软硬件平台"><a href="#0-系统说明及软硬件平台" class="headerlink" title="0. 系统说明及软硬件平台"></a>0. 系统说明及软硬件平台</h2><p>操作系统：Windows 10 22H2</p><p>软件版本：</p><ul><li>Vivado 2021.2</li><li>VSCode 1.91.1</li></ul><h2 id="1-安装-Vivado-和-VSCode"><a href="#1-安装-Vivado-和-VSCode" class="headerlink" title="1. 安装 Vivado 和 VSCode"></a>1. 安装 Vivado 和 VSCode</h2><p>过程略。</p><h2 id="2-将-VSCode-设置为-Vivado-的默认代码编辑器。"><a href="#2-将-VSCode-设置为-Vivado-的默认代码编辑器。" class="headerlink" title="2. 将 VSCode 设置为 Vivado 的默认代码编辑器。"></a>2. 将 VSCode 设置为 Vivado 的默认代码编辑器。</h2><p>打开 Vivado，进入 Settings 页面。</p><p><img src="/../assets/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/image-20240719211431395.png" alt="image-20240719211431395"></p><p>Text Editor  –&gt;  Current Editor 的下拉列表 –&gt; 选择 Custom Editor… –&gt; …</p><p><img src="/../assets/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/image-20240719214011233.png" alt="image-20240719214011233"></p><p>在 Editor 中输入 <code>cmd /S /k &quot;code -g [file name]:[line number]&quot;</code>，点击 OK。</p><p><img src="/../assets/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/image-20240719213322147.png" alt="image-20240719213322147"></p><p>随便打开一个工程，双击需要打开的文件。</p><p><img src="/../assets/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/image-20240719214758564.png" alt="image-20240719214758564"></p><p>成功在 VSCode 中打开文件。</p><p><img src="/../assets/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/image-20240719215059169.png" alt="image-20240719215059169"></p><h2 id="3-安装-Verilog-SystemVerilog-插件，并拓展其功能。"><a href="#3-安装-Verilog-SystemVerilog-插件，并拓展其功能。" class="headerlink" title="3. 安装 Verilog &#x2F; SystemVerilog 插件，并拓展其功能。"></a>3. 安装 Verilog &#x2F; SystemVerilog 插件，并拓展其功能。</h2><h3 id="3-1-安装插件"><a href="#3-1-安装插件" class="headerlink" title="3.1 安装插件"></a>3.1 安装插件</h3><p>打开 VSCode –&gt; Extensions –&gt; 搜索 verilog –&gt; 选择红框标记的这个插件，我这里是已经装好的状态，未安装状态下会像其他插件一样，有个 Install 的按钮，点一下即可安装。</p><p><img src="/../assets/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/image-20240719220041202.png" alt="image-20240719220041202"></p><h3 id="3-2-代码实时纠错："><a href="#3-2-代码实时纠错：" class="headerlink" title="3.2 代码实时纠错："></a>3.2 代码实时纠错：</h3><p>快捷键 <code>Win + I</code> 打开 Windows 设置 –&gt; 搜索 “环境变量” –&gt; 编辑系统环境变量。</p><p><img src="/../assets/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/image-20240719220748758.png" alt="image-20240719220748758"></p><p>点击 “环境变量”。</p><p><img src="/../assets/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/image-20240719221007832.png" alt="image-20240719221007832"></p><p>选中系统变量中的 Path，点击编辑。</p><p><img src="/../assets/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/image-20240719221248653.png" alt="image-20240719221248653"></p><p>添加 Vivado 的安装路径。</p><p><img src="/../assets/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/image-20240719221340150.png" alt="image-20240719221340150"></p><p>由于本人暂且没有完全搞懂 “系统变量” 和 “用户变量” 的本质区别，所以在 “用户变量” 中执行了与上一步相同的操作。</p><p><img src="/../assets/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/image-20240719221630140.png" alt="image-20240719221630140"></p><p>回到 VSCode，使用快捷键 <code>Ctrl + ,</code> 打开 Settings –&gt; 搜索 verilog –&gt; 在 “Verilog &gt; Linting: Linter” 中选择 xvlog。</p><p><img src="/../assets/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/image-20240719222106335.png" alt="image-20240719222106335"></p><p>完成！</p><h3 id="3-3-定义跳转："><a href="#3-3-定义跳转：" class="headerlink" title="3.3 定义跳转："></a>3.3 定义跳转：</h3><p>下载 ctags: <a href="https://github.com/universal-ctags/ctags-win32/releases">universal-ctags &#x2F; ctags-win32</a></p><p>解压在电脑上，目录随意，不过按照习惯建议路径中不要有中文。下图是我放的位置。</p><p><img src="/../assets/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/image-20240719223422015.png" alt="image-20240719223422015"></p><p>将 ctags 的目录添加到环境变量中（此处不在赘述，详细方法见上文中 [代码实时纠错](# 2. 代码实时纠错：) 部分。结果如下：</p><p><img src="/../assets/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/image-20240719224407100.png" alt="image-20240719224407100"></p><p><img src="/../assets/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/image-20240719224420031.png" alt="image-20240719224420031"></p><p>回到 VSCode，使用快捷键 <code>Ctrl + ,</code> 打开 Settings –&gt; 搜索 verilog –&gt; 在 “Verilog &gt; Ctags: Path” 中填写 <code>ctags</code>。</p><p>完成！</p><p><em><strong>注意</strong></em>：要使用 ctags 的定义跳转的功能，一定要先创建工作区！！！</p><p><img src="/../assets/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/image-20240719225338702.png" alt="image-20240719225338702"></p><p><img src="/../assets/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/image-20240719225236186.png" alt="image-20240719225236186"></p><p><img src="/../assets/%E5%A6%82%E4%BD%95%E7%94%A8%E4%BD%BF%E7%94%A8-Vivado-VSCode-%E8%BF%9B%E8%A1%8C-FPGA-%E5%BC%80%E5%8F%91/image-20240719225433783.png" alt="image-20240719225433783"></p><h2 id="4-待补充"><a href="#4-待补充" class="headerlink" title="4. 待补充"></a>4. 待补充</h2><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>[^1]:<a href="https://www.bilibili.com/read/cv34148140/?jump_opus=1">VScode配合Vivado的FPGA开发环境设置的教程</a>：修改 Vivado 默认编辑器的步骤需要给 Custom Editor Definition 里的 Editor 输入一串代码，这个博客中的代码是不可用的，按照我自己写的来。<br>[^2]:<a href="https://support.xilinx.com/s/question/0D52E00006hpllISAQ/i-cant-get-vivado-to-open-vscode-as-a-custom-editor?language=en_US&t=1680960017474">Vivado 打不开 VSCode 如何解决</a>：可以解决参考资料 [1] 中的问题。<br>[^3]:<a href="https://zhuanlan.zhihu.com/p/622356787">FPGA终于可以愉快地写代码了！Vivado和Visual Studio Code黄金搭档</a><br>[^4]:</p>]]></content>
      
      
      <categories>
          
          <category> Vivado 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vivado </tag>
            
            <tag> VSCode </tag>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + GitHub Pages 搭建个人博客网站</title>
      <link href="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
      <url>/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="0-系统说明及软硬件平台"><a href="#0-系统说明及软硬件平台" class="headerlink" title="0. 系统说明及软硬件平台"></a>0. 系统说明及软硬件平台</h2><p>操作系统：Windows 10 22H2</p><p>软件版本：</p><ul><li>Git 2.45.2</li><li>Node.js 20.15.1</li><li>Hexo 7.3.0</li><li>Hexo theme butterfly 4.13.0</li></ul><h2 id="1-安装-Git"><a href="#1-安装-Git" class="headerlink" title="1. 安装 Git"></a>1. 安装 Git</h2><h3 id="1-1-下载-Git-安装包"><a href="#1-1-下载-Git-安装包" class="headerlink" title="1.1 下载 Git 安装包"></a>1.1 下载 Git 安装包</h3><p>选择自己系统对应的 <a href="https://git-scm.com/downloads">安装包</a> 进行下载。</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722103120872.png" alt="image-20240722103120872"></p><h3 id="1-2-安装过程"><a href="#1-2-安装过程" class="headerlink" title="1.2 安装过程"></a>1.2 安装过程</h3><p>略，基本一路 next 即可。本人习惯性将软件安装目录换到 D 盘；Select Components 中，Windows Explorer integration 一定要勾选。</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722103326503.png" alt="image-20240722103326503"></p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722104404314.png" alt="image-20240722104404314"></p><h3 id="1-3-测试-Git-是否安装成功"><a href="#1-3-测试-Git-是否安装成功" class="headerlink" title="1.3 测试 Git 是否安装成功"></a>1.3 测试 Git 是否安装成功</h3><p>打开 Git Bash，输入 <code>git -v</code>，如果出现版本号说明配置成功。</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722152317668.png" alt="image-20240722152317668"></p><h2 id="2-安装-Node-js"><a href="#2-安装-Node-js" class="headerlink" title="2. 安装 Node.js"></a>2. 安装 Node.js</h2><h3 id="2-1-下载-Node-js-安装包"><a href="#2-1-下载-Node-js-安装包" class="headerlink" title="2.1 下载 Node.js 安装包"></a>2.1 下载 Node.js 安装包</h3><p>直接下载安装 <a href="https://nodejs.org/en">LST (long-term support)</a> 版本，安装的时候一直 next 即可。</p><h3 id="2-2-测试-Node-js-是否安装成功"><a href="#2-2-测试-Node-js-是否安装成功" class="headerlink" title="2.2 测试 Node.js 是否安装成功"></a>2.2 测试 Node.js 是否安装成功</h3><p>安装完后打开 Git Bash，输入<code>node -v</code> 和 <code>npm -v</code>，如果出现版本号说明配置成功。</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722143758465.png" alt="image-20240722143758465"></p><h3 id="2-3-修改依赖包存放路径："><a href="#2-3-修改依赖包存放路径：" class="headerlink" title="2.3 修改依赖包存放路径："></a>2.3 修改依赖包存放路径：</h3><blockquote><p>默认情况下，我们利用 <code>npm</code> 包管理器用来安装依赖包时，包会默认存放在 <code>C:\Users\用户名\AppData\Roaming\npm\node_modules</code> 目录下。这样就存在一个问题，如果我们的依赖包很多的情况下，就会占用我们系统盘大量的空间，这时候我们如果不想让全局包放在这里，那么就可以自定义存放目录。修改的方式也很简单，只需要在控制台中执行如下两条命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\node\node_global&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\node\node_cache&quot;</span></span><br></pre></td></tr></table></figure><p>代码内地址可修改[^1]</p></blockquote><p>我这里改成了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\Software\nodejs\node_global&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\Software\nodejs\node_cache&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722144006733.png" alt="image-20240722144006733"></p><p><del>然后在 <code>D:\Software\nodejs</code> 路径下分别建立 <code>node_global</code> 和 <code>node_cache</code> 文件夹，注意这一步一定要做，因为在这个目录底下建立 <code>node_global</code> 和 <code>node_cache</code> 文件夹是需要管理员权限的，如果不提前建立文件夹，在 [4.1.1 全局安装 Hexo 的命令行工具 hexo-cli](# 4.1.1 全局安装 Hexo 的命令行工具 hexo-cli) 这一步中使用 <code>npm i hexo-cli -g</code> 时会出现 error，提示npm 在尝试创建 <code>D:\Software\nodejs\node_global</code> 目录时，被操作系统拒绝了。</del>后来发现既然没有权限，那就直接用管理员身份运行 Git Bash，然后 <code>cd</code> 进 Hexo 的目录就好了。不然如果每个文件夹都自己建立，还是很麻烦的（文件夹很多）。故这一步不用做，这里保留内容以供以后参考。</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240724200322119.png" alt="image-20240724200322119"></p><h3 id="2-4-换源"><a href="#2-4-换源" class="headerlink" title="2.4 换源"></a>2.4 换源</h3><p>官方源的下载速度较慢，故更换镜像源为淘宝源，加快下载速度。在 Git Bash 中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更换镜像源为淘宝源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看目前使用的镜像源 </span></span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722151700715.png" alt="image-20240722151700715"></p><h2 id="3-注册-GitHub-账号"><a href="#3-注册-GitHub-账号" class="headerlink" title="3. 注册 GitHub 账号"></a>3. 注册 GitHub 账号</h2><p>略。</p><h2 id="4-本地Hexo部署"><a href="#4-本地Hexo部署" class="headerlink" title="4. 本地Hexo部署"></a>4. 本地Hexo部署</h2><h3 id="4-1-安装Hexo"><a href="#4-1-安装Hexo" class="headerlink" title="4.1 安装Hexo"></a>4.1 安装Hexo</h3><p>以管理员身份打开 Git Bash（一定要管理员身份！！！不然 <code>npm i hexo-cli -g</code> 和 <code>npm install</code> 成功不了），用 <code>cd</code> 指令进入 Hexo 文件夹（Hexo 文件夹随便放哪里都可以，我放在了软件的安装目录下），依次输入以下指令：</p><h4 id="4-1-1-全局安装-Hexo-的命令行工具-hexo-cli"><a href="#4-1-1-全局安装-Hexo-的命令行工具-hexo-cli" class="headerlink" title="4.1.1 全局安装 Hexo 的命令行工具 hexo-cli"></a>4.1.1 全局安装 Hexo 的命令行工具 hexo-cli</h4><p>输入 <code>npm i hexo-cli -g</code> 结果如下：</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722155303181.png" alt="image-20240722155303181"></p><h4 id="4-1-2-初始化一个新的-Hexo-网站"><a href="#4-1-2-初始化一个新的-Hexo-网站" class="headerlink" title="4.1.2 初始化一个新的 Hexo 网站"></a>4.1.2 初始化一个新的 Hexo 网站</h4><p>输入 <code>hexo init</code> 时出现了报错 <code>bash: hexo: command not found</code>：</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722165501001.png" alt="image-20240722165501001"></p><p>参考了这篇博客[^2]的内容后，发现出现这个报错很有可能是因为没有添加环境变量。使用 <code>npm root -g</code> 查看 npm 全局包的安装路径：</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722170017488.png" alt="image-20240722170017488"></p><p>但此时不要将此路径添加至系统环境变量，而是此路径的上一级文件夹：</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722171942082.png" alt="image-20240722171942082"></p><p>重启 Git Bash（记得用管理员身份运行，其实 <code>hexo init</code>应该不用管理员身份也可以使用，但 [4.1.3](# 4.1.3 安装 Node.js 所需的依赖包) 这一步是必须要用的），用 <code>hexo -v</code> 测试 Hexo 是否能成功使用，发现没问题了！！！</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722172035049.png" alt="image-20240722172035049"></p><p>我的理解是，在 [2. 安装 Node.js ](# 2. 安装 Node.js)中的“修改依赖包存放路径”[111](# 修改依赖包存放路径：)里，用 <code>npm config set prefix &quot;D:\Software\nodejs\node_global&quot;</code> 把全局包的安装路径换到了 <code>D:\Software\nodejs\node_global</code>，所以全局变量必须要加上这个路径。</p><p>此时回到 Hexo 文件夹的路径下，输入 <code>hexo init</code> 结果如下：</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722175512566.png" alt="image-20240722175512566"></p><h4 id="4-1-3-安装-Node-js-所需的依赖包"><a href="#4-1-3-安装-Node-js-所需的依赖包" class="headerlink" title="4.1.3 安装 Node.js 所需的依赖包"></a>4.1.3 安装 Node.js 所需的依赖包</h4><p>输入 <code>npm install</code> 结果如下（这一步也是一定要先用管理员身份运行 Git Bash）：</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722195038353.png" alt="image-20240722195038353"></p><h3 id="4-2-测试页面"><a href="#4-2-测试页面" class="headerlink" title="4.2 测试页面"></a>4.2 测试页面</h3><h4 id="4-2-1-生成静态页面并打开本地服务器"><a href="#4-2-1-生成静态页面并打开本地服务器" class="headerlink" title="4.2.1 生成静态页面并打开本地服务器"></a>4.2.1 生成静态页面并打开本地服务器</h4><p>输入以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成静态页面</span></span><br><span class="line">hexo g </span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开本地服务器</span></span><br><span class="line">hexo s </span><br></pre></td></tr></table></figure><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722205345468.png" alt="image-20240722205345468"></p><h4 id="4-2-2-查看博客"><a href="#4-2-2-查看博客" class="headerlink" title="4.2.2 查看博客"></a>4.2.2 查看博客</h4><p>打开浏览器，输入 <code>http://localhost:4000/</code>，结果如下：</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722205837866.png" alt="image-20240722205837866"></p><h4 id="4-2-3-关闭本地服务器"><a href="#4-2-3-关闭本地服务器" class="headerlink" title="4.2.3 关闭本地服务器"></a>4.2.3 关闭本地服务器</h4><p>输入 <code>Ctrl + C</code> ：</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722210054736.png" alt="image-20240722210054736"></p><h3 id="4-3-设置主题"><a href="#4-3-设置主题" class="headerlink" title="4.3 设置主题"></a>4.3 设置主题</h3><h4 id="4-3-1-安装-Stellar-主题"><a href="#4-3-1-安装-Stellar-主题" class="headerlink" title="4.3.1 安装 Stellar 主题"></a>4.3.1 安装 Stellar 主题</h4><p>输入 <code>npm i hexo-theme-stellar</code>：</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722210548429.png" alt="image-20240722210548429"></p><h4 id="4-3-2-修改-config-yml-文件"><a href="#4-3-2-修改-config-yml-文件" class="headerlink" title="4.3.2 修改 _config.yml 文件"></a>4.3.2 修改 _config.yml 文件</h4><p>来到 Hexo 文件夹，找到 <code>_config.yml</code> 文件，用文本编辑器编辑它。<code>Ctrl + F</code> 搜索 <code>theme</code> 关键字，找到后将其修改为 <code>theme: stellar</code>。</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722210633893.png" alt="image-20240722210633893"></p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722210758222.png" alt="image-20240722210758222"></p><h4 id="4-3-3-清理缓存、生成静态页面并打开本地服务器"><a href="#4-3-3-清理缓存、生成静态页面并打开本地服务器" class="headerlink" title="4.3.3 清理缓存、生成静态页面并打开本地服务器"></a>4.3.3 清理缓存、生成静态页面并打开本地服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换主题后需要清理缓存</span></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">hexo g </span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开本地服务器</span></span><br><span class="line">hexo s </span><br></pre></td></tr></table></figure><p>结果图略，类似[4.2.1 生成静态页面并打开本地服务器](# 4.2.1 生成静态页面并打开本地服务器)。</p><h4 id="4-3-4-查看并关闭博客"><a href="#4-3-4-查看并关闭博客" class="headerlink" title="4.3.4 查看并关闭博客"></a>4.3.4 查看并关闭博客</h4><p>打开浏览器，输入 <code>http://localhost:4000/</code>，结果如下：</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722211541778.png" alt="image-20240722211541778"></p><p>在 Git Bash 中输入 <code>Ctrl + C</code> 关闭本地服务器。</p><h2 id="5-发布到-GitHub-Pages"><a href="#5-发布到-GitHub-Pages" class="headerlink" title="5. 发布到 GitHub Pages"></a>5. 发布到 GitHub Pages</h2><h3 id="5-1-本地-SSH-密钥"><a href="#5-1-本地-SSH-密钥" class="headerlink" title="5.1 本地 SSH 密钥"></a>5.1 本地 SSH 密钥</h3><h4 id="5-1-1-设置-Git-的全局用户名和邮箱"><a href="#5-1-1-设置-Git-的全局用户名和邮箱" class="headerlink" title="5.1.1 设置 Git 的全局用户名和邮箱"></a>5.1.1 设置 Git 的全局用户名和邮箱</h4><p>在 Git Bash 中输入以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置用户名和邮箱，注意要填自己的 GitHub 用户名和邮箱</span></span><br><span class="line">git config --global user.name <span class="string">&quot;GitHub 用户名&quot;</span> <span class="comment"># 你的 GitHub 用户名</span></span><br><span class="line">git config --global user.email <span class="string">&quot;GitHub 注册邮箱&quot;</span> <span class="comment"># 你的 GitHub 注册邮箱</span></span><br></pre></td></tr></table></figure><p>为了保护隐私，这里不放出结果图（其实也没有输出，所以本身就没什么好看的）。</p><h4 id="5-1-2-生成-SSH-密钥"><a href="#5-1-2-生成-SSH-密钥" class="headerlink" title="5.1.2 生成 SSH 密钥"></a>5.1.2 生成 SSH 密钥</h4><p>输入下面的命令，并连续键入三次回车(即不设置密码)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成 ssh 密钥，注意填你自己的 GitHub 邮箱</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;GitHub 注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722213450144.png" alt="image-20240722213450144"></p><p>在本地 <code>C:\Users\用户\.ssh</code> 目录下，找到 <code>id_rsa.pub</code>（公钥），用文本编辑器打开并复制内容（如果没有 <code>.ssh</code> 文件夹，可能是被隐藏了，可以试试勾选上面的“隐藏的项目”，但不知道为什么我这里不勾选也有）：</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722223035271.png" alt="image-20240722223035271"></p><h4 id="5-1-3-配置远程SSH"><a href="#5-1-3-配置远程SSH" class="headerlink" title="5.1.3 配置远程SSH"></a>5.1.3 配置远程SSH</h4><p>打开 GitHub 的 Settings，进入 SSH and GPG keys，点击 </p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240723172428465.png" alt="image-20240723172428465"></p><p>Title 随意，Key 里填写 <code>id_rsa.pub</code> 的内容。填写完成后点击 Add SSH key。</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240723172638518.png" alt="image-20240723172638518"></p><h3 id="5-2-新建-GitHub-Pages"><a href="#5-2-新建-GitHub-Pages" class="headerlink" title="5.2 新建 GitHub Pages"></a>5.2 新建 GitHub Pages</h3><p>进入 <a href="https://github.com/">GitHub 官网</a>，创建一个仓库，Repository name 一定要设置为 <code>username.github.io</code>，<code>username</code>就是自己的 GitHub 用户名。</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722224410634.png" alt="image-20240722224410634"></p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240723215858832.png" alt="image-20240723215858832"></p><h3 id="5-3-部署博客"><a href="#5-3-部署博客" class="headerlink" title="5.3 部署博客"></a>5.3 部署博客</h3><h4 id="5-3-1-安装-Hexo-的-Git-部署器"><a href="#5-3-1-安装-Hexo-的-Git-部署器" class="headerlink" title="5.3.1 安装 Hexo 的 Git 部署器"></a>5.3.1 安装 Hexo 的 Git 部署器</h4><p>在 Git Bash 中进入 Hexo 文件夹，输入 <code>npm install hexo-deployer-git --save</code> 安装 Git 部署器。</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240723204441513.png" alt="image-20240723204441513"></p><h4 id="5-3-2-修改配置文件"><a href="#5-3-2-修改配置文件" class="headerlink" title="5.3.2 修改配置文件"></a>5.3.2 修改配置文件</h4><p>来到 Hexo 文件夹，找到 <code>_config.yml</code> 文件，用文本编辑器编辑它。找到以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="comment"># 这里填入之前在 GitHub 上创建仓库的完整路径</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:username/username.github.io.git</span> <span class="comment"># username 就是 GitHub 的用户名，这个是 ssh 协议的地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h4 id="5-3-3-将网站上传到-GitHub-Pages"><a href="#5-3-3-将网站上传到-GitHub-Pages" class="headerlink" title="5.3.3 将网站上传到 GitHub Pages"></a>5.3.3 将网站上传到 GitHub Pages</h4><p>在 Git Bash 中执行一下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g <span class="comment"># 生成静态页面，并发布至远程仓库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于下面这两行代码</span></span><br><span class="line"><span class="comment">#hexo g</span></span><br><span class="line"><span class="comment">#hexo d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实际上，按照官网的教程，在运行 hexo d 前要先运行一下 hexo c，但我这里不运行也没出现啥问题，这里提一句作为记录</span></span><br></pre></td></tr></table></figure><p>再进入仓库 Settings 的 Pages 界面，做以下修改（选完后记得点 Save）：</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240723220456140.png" alt="image-20240723220456140"></p><p>刷新 Pages 页面，会发现出现了 Your site is live at … 的提示。</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240723221345215.png" alt="image-20240723221345215"></p><p>此时打开 <code>https://username.github.io</code> 就会发现博客已经部署好，这里就不放展示图啦！</p><h2 id="6-个性化配置"><a href="#6-个性化配置" class="headerlink" title="6. 个性化配置"></a>6. 个性化配置</h2><h3 id="6-1-更换主题"><a href="#6-1-更换主题" class="headerlink" title="6.1 更换主题"></a>6.1 更换主题</h3><p>这里我选择了 <a href="https://github.com/fluid-dev/hexo-theme-fluid?tab=readme-ov-file">Fluid</a> 主题。进入 <code>Hexo</code> 文件夹，打开 Git Bash，运行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-theme-fluid</span><br></pre></td></tr></table></figure><p>在 <code>Hexo</code> 文件夹里创建 <code>_config.fluid.yml</code> 文件，然后将 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 里的内容复制进去。</p><p>打开 <code>_config.yml</code> 文件，修改 <code>theme</code> 为 <code>theme: fluid</code>，修改 <code>language</code> 为 <code>language: zh-CN</code>。</p><p>在 Git Bash 中进入 <code>Hexo</code> 文件夹，运行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>进入博客的页面，发现主题已经改变（可能有一段时间的延迟）。</p><p>剩下的配置还有很多，但 Fluid 的手册里已经阐述的非常详细了，这里不再赘述，详见 <a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a>[^5]。</p><h3 id="6-2-多端同步博客"><a href="#6-2-多端同步博客" class="headerlink" title="6.2 多端同步博客"></a>6.2 多端同步博客</h3><p>我遇到了这样的情况：我的博客环境搭建在实验室的主机上，但我有时候想在自己的笔记本上修改博客，这个时候就涉及到了多端同步的问题。</p><p>在参考了一些资料[^6][^7]后，我觉得可以这么做：</p><p>打开 Hexo 的那个仓库，本来应该只有 master 这个分支的，这个时候建立一个 hexo 分支，并把 hexo 分支设置为默认分支。</p><p><img src="/../assets/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240728160354019.png" alt="hexo 为默认分支"></p><p>假设实验室的主机是 A，我的笔记本是 B。</p><p>先在 A 进行操作。首先新建一个文件夹 <code>temp</code>，在这个目录下打开 Git Bash，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:username/username.github.io.git</span><br></pre></td></tr></table></figure><p>clone成功后，删掉除去 <code>.git</code> 之外的所有文件夹。然后把 <code>Hexo</code> 目录下所有文件复制到 <code>temp</code> 文件夹，删除 <code>.deploy_git</code>。</p><p>新建或者修改 <code>.gitignore</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><p><em><strong>注意：</strong></em></p><blockquote><p>如果你在<code>themes</code>文件夹下 clone 过其它主题文件，把其中的 <code>.git</code>文件夹删除掉[^6]</p></blockquote><p>但我是用 <code>npm</code> 指令安装的主题，所以不存在这个问题。</p><p>然后上传文件到 hexo 分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;backup blog source file0305&quot;</span></span><br><span class="line">git push </span><br></pre></td></tr></table></figure><p>A 上的配置操作暂时结束。</p><p>接着在 B 上操作。首先 安装 Git，Node.js， Hexo 这些，还有一些基础设置比如设置 Git 的全局用户名和邮箱，这些全部搞好。</p><p>然后进入这台电脑的 <code>Hexo</code> 文件夹，clone 仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:username/username.github.io.git</span><br></pre></td></tr></table></figure><p>clone 成功后，在 <code>Hexo</code> 目录下安装依赖包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>B 上的操作结束。</p><p>现在就可以在 B 上写博客了，写完后记得同步到仓库然后再更新博客网站：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多台终端写博客，记得先和 GitHub 端同步，当然如果是第一次刚刚配置完就不用做这一步，但只要别的终端更新过博客，就必须要做这一步</span></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步到仓库</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;...&quot;</span> <span class="comment"># 可以写日期或者其他的</span></span><br><span class="line">git push </span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新博客网站</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>再回到 A，此时还要把 A 上本来的 <code>Hexo</code> 文件夹关联到仓库的 hexo 分支。但这里我做的稀里糊涂的（主要还是对 Git 的用法不熟），所以直接放步骤了。</p><p>进入 <code>Hexo</code> 文件夹，打开 Git Bash，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin git@github.com:username/username.github.io.git</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:morningmist42672/morningmist42672.github.io.git</span><br></pre></td></tr></table></figure><p>这个时候 <code>Hexo</code> 目录底下会有一个 <code>morningmist42672.github.io</code> 文件夹，用这个文件夹里的全部文件覆盖 <code>Hexo</code> 文件夹里的同名文件。</p><p>然后回到 Git Bash，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout hexo <span class="comment"># 如果已经在 hexo 分支下就不用输入这个命令，但一般情况下应该都不在</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步到仓库</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;...&quot;</span> <span class="comment"># 可以写日期或者其他的</span></span><br><span class="line">git push </span><br></pre></td></tr></table></figure><p>然后以后不管是在 A 还是在 B，亦或是以后还有 C，反正都是先把仓库的最新版本同步到本地，然后写博客，然后再上传到仓库，最后再发布博客。发布放在最后是一个好习惯，如果先发布博客，但发布后因为电脑突然出问题或者什么别的原因（概率极低，但还是有概率）导致没有上传仓库，那么最新版本的 <code>.md</code> 文件将丢失。想上传仓库则绝对不会有这个问题。</p><h3 id="6-3-不让搜索引擎搜索到你的博客"><a href="#6-3-不让搜索引擎搜索到你的博客" class="headerlink" title="6.3 不让搜索引擎搜索到你的博客"></a>6.3 不让搜索引擎搜索到你的博客</h3><p><em><strong>注意：存疑，ChatGPT 提供的方法，不知真假；两种方法用一种就可以，当然都用更保险。</strong></em></p><h4 id="6-3-1-使用-robots-txt-文件禁止搜索引擎抓取"><a href="#6-3-1-使用-robots-txt-文件禁止搜索引擎抓取" class="headerlink" title="6.3.1 使用 robots.txt 文件禁止搜索引擎抓取"></a>6.3.1 使用 robots.txt 文件禁止搜索引擎抓取</h4><p>进入 <code>Hexo/source</code> 路径，创建 <code>robots.txt</code> 文件，填入一下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /</span><br></pre></td></tr></table></figure><h4 id="6-3-2-在页面中添加noindex元标签"><a href="#6-3-2-在页面中添加noindex元标签" class="headerlink" title="6.3.2 在页面中添加noindex元标签"></a>6.3.2 在页面中添加noindex元标签</h4><p><em><strong>注意：我使用了 git 进行 Hexo 的多端同步（详见 [6.2 多端同步博客](# 6.2 多端同步博客)）,使用这种方法进行的修改，是无法被 git 同步的（因为修改的是主题文件，使用 <code>npm</code> 安装的主题，包会放在 <code>Hexo/node_modules</code> 下，这个目录是不会同步的），所以每在一台新电脑上创建一个 Hexo 终端，就要重新做一次这个操作，切记。</strong></em></p><p>进入 <code>Hexo/node_modules/你的主题/layout/_partial</code>，打开 <code>head.ejs</code> 文件，在 <code>&lt;head&gt;</code> 部分添加以下元标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;noindex, nofollow&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><del>但很奇怪，我使用的 butterfly 主题并没有 <code>head.ejs</code> 文件，问了一下 ChatGPT，他让我这么操作：进入 <code>Hexo/node_modules/hexo-theme-butterfly/layout/includes</code>，打开 <code>head.pug</code> 文件，修改以下内容：</del>这么做不行，<code>hexo g</code> 时会报错，暂时放弃这一步吧。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">meta(charset=&#x27;UTF-8&#x27;)</span><br><span class="line">meta(http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;)</span><br><span class="line">meta(name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0,viewport-fit=cover&quot;)</span><br><span class="line">meta(name=&quot;robots&quot; content=&quot;noindex, nofollow&quot;)  // 添加这一行</span><br><span class="line">title= tabTitle</span><br><span class="line">meta(name=&quot;author&quot; content=pageAuthor)</span><br><span class="line">meta(name=&quot;copyright&quot; content=pageCopyright)</span><br><span class="line">meta(name =&quot;format-detection&quot; content=&quot;telephone=no&quot;)</span><br><span class="line">meta(name=&quot;theme-color&quot; content=themeColor)</span><br></pre></td></tr></table></figure><p>完成！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[^1]:<a href="https://zhuanlan.zhihu.com/p/688561305">【2024】从零开始用Hexo+GitHub Pages搭建个人网站（保姆级）</a>：搭建过程主要来自于这篇博客。<br>[^2]:<a href="https://cloud.baidu.com/article/3284918">解决npm安装Hexo时出现的’bash: hexo: command not found’问题</a>：解决了 bash: hexo: command not found 的报错。<br>[^3]:<a href="https://blog.csdn.net/cat_bayi/article/details/128725230">Hexo教程，看这一篇就够了- How to系列</a>：看这篇博客学了更换主题和一些 Hexo 的基本操作，可以对照着[^1]一起看。<br>[^4]:<a href="https://github.com/fluid-dev/hexo-theme-fluid">hexo-theme-fluid</a>：Fluid 的 GitHub 官网。<br>[^5]:<a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a>：Hexo Fluid 的官方用户手册，对着这个可以完成 Fluid 主题的基本配置。<br>[^6]:<a href="https://zhuanlan.zhihu.com/p/476603074">Hexo搭建博客的多终端同步问题</a>：<br>[^7]:<a href="https://www.zhihu.com/question/21193762">使用hexo，如果换了电脑怎么更新博客？</a>：</p>]]></content>
      
      
      <categories>
          
          <category> Hexo 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Node.js </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
