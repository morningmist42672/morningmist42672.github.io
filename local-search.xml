<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo-GitHub-Pages-搭建个人博客网站</title>
    <link href="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <url>/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h2 id="0-系统说明及软硬件平台"><a href="#0-系统说明及软硬件平台" class="headerlink" title="0. 系统说明及软硬件平台"></a>0. 系统说明及软硬件平台</h2><h2 id="1-安装-Git。"><a href="#1-安装-Git。" class="headerlink" title="1. 安装 Git。"></a>1. 安装 Git。</h2><h3 id="1-1-下载-Git-安装包"><a href="#1-1-下载-Git-安装包" class="headerlink" title="1.1 下载 Git 安装包"></a>1.1 下载 Git 安装包</h3><p>选择自己系统对应的 <a href="https://git-scm.com/downloads">安装包</a> 进行下载。</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722103120872.png" class="" title="image-20240722103120872"><h3 id="1-2-安装过程略"><a href="#1-2-安装过程略" class="headerlink" title="1.2 安装过程略"></a>1.2 安装过程略</h3><p>基本一路 next 即可。本人习惯性将软件安装目录换到 D 盘；Select Components 中，Windows Explorer integration 一定要勾选。</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722103326503.png" class="" title="image-20240722103326503"><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722104404314.png" class="" title="image-20240722104404314"><h3 id="1-3-测试-Git-是否安装成功"><a href="#1-3-测试-Git-是否安装成功" class="headerlink" title="1.3 测试 Git 是否安装成功"></a>1.3 测试 Git 是否安装成功</h3><p>打开 Git Bash，输入 <code>git -v</code>，如果出现版本号说明配置成功。</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722152317668.png" class="" title="image-20240722152317668"><h2 id="2-安装-Node-js"><a href="#2-安装-Node-js" class="headerlink" title="2. 安装 Node.js"></a>2. 安装 Node.js</h2><h3 id="2-1-下载-Node-js-安装包"><a href="#2-1-下载-Node-js-安装包" class="headerlink" title="2.1 下载 Node.js 安装包"></a>2.1 <a href="https://nodejs.org/en">下载 Node.js 安装包</a></h3><p>直接下载安装 LST (long-term support) 版本，安装的时候一直 next 即可。</p><h3 id="2-2-测试-Node-js-是否安装成功"><a href="#2-2-测试-Node-js-是否安装成功" class="headerlink" title="2.2 测试 Node.js 是否安装成功"></a>2.2 测试 Node.js 是否安装成功</h3><p>安装完后打开 Git Bash，输入<code>node -v</code> 和 <code>npm -v</code>，如果出现版本号说明配置成功。</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722143758465.png" class="" title="image-20240722143758465"><h3 id="2-3-修改依赖包存放路径："><a href="#2-3-修改依赖包存放路径：" class="headerlink" title="2.3 修改依赖包存放路径："></a>2.3 修改依赖包存放路径：</h3><blockquote><p>默认情况下，我们利用 <code>npm</code> 包管理器用来安装依赖包时，包会默认存放在 <code>C:\Users\用户名\AppData\Roaming\npm\node_modules</code> 目录下。这样就存在一个问题，如果我们的依赖包很多的情况下，就会占用我们系统盘大量的空间，这时候我们如果不想让全局包放在这里，那么就可以自定义存放目录。修改的方式也很简单，只需要在控制台中执行如下两条命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> prefix <span class="hljs-string">&quot;D:\node\node_global&quot;</span><br>npm config <span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;D:\node\node_cache&quot;</span><br></code></pre></td></tr></table></figure><p>代码内地址可修改<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[【2024】从零开始用Hexo+GitHub Pages搭建个人网站（保姆级）](https://zhuanlan.zhihu.com/p/688561305)：搭建过程主要来自于这篇博客。">[1]</span></a></sup></p></blockquote><p>我这里改成了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> prefix <span class="hljs-string">&quot;D:\Software\nodejs\node_global&quot;</span><br>npm config <span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;D:\Software\nodejs\node_cache&quot;</span><br></code></pre></td></tr></table></figure><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722144006733.png" class="" title="image-20240722144006733"><p><del>然后在 <code>D:\Software\nodejs</code> 路径下分别建立 <code>node_global</code> 和 <code>node_cache</code> 文件夹，注意这一步一定要做，因为在这个目录底下建立 <code>node_global</code> 和 <code>node_cache</code> 文件夹是需要管理员权限的，如果不提前建立文件夹，在 [4.1.1 全局安装 Hexo 的命令行工具 hexo-cli](# 4.1.1 全局安装 Hexo 的命令行工具 hexo-cli) 这一步中使用 <code>npm i hexo-cli -g</code> 时会出现 error，提示npm 在尝试创建 <code>D:\Software\nodejs\node_global</code> 目录时，被操作系统拒绝了。</del>后来发现既然没有权限，那就直接用管理员身份运行 Git Bash，然后 <code>cd</code> 进 Hexo 的目录就好了。不然如果每个文件夹都自己建立，还是很麻烦的（文件夹很多）。故这一步不用做，这里保留内容以供以后参考。</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240724200322119.png" class="" title="image-20240724200322119"><h3 id="2-4-换源"><a href="#2-4-换源" class="headerlink" title="2.4 换源"></a>2.4 换源</h3><p>官方源的下载速度较慢，故更换镜像源为淘宝源，加快下载速度。在 Git Bash 中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更换镜像源为淘宝源</span><br>npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br><br><span class="hljs-comment">#查看目前使用的镜像源 </span><br>npm config get registry<br></code></pre></td></tr></table></figure><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722151700715.png" class="" title="image-20240722151700715"><h2 id="3-注册-GitHub-账号略"><a href="#3-注册-GitHub-账号略" class="headerlink" title="3. 注册 GitHub 账号略"></a>3. 注册 GitHub 账号略</h2><h2 id="4-本地Hexo部署"><a href="#4-本地Hexo部署" class="headerlink" title="4. 本地Hexo部署"></a>4. 本地Hexo部署</h2><h3 id="4-1-安装Hexo"><a href="#4-1-安装Hexo" class="headerlink" title="4.1 安装Hexo"></a>4.1 安装Hexo</h3><p>以管理员身份打开 Git Bash（一定要管理员身份！！！不然 <code>npm i hexo-cli -g</code> 和 <code>npm install</code> 成功不了），用 <code>cd</code> 指令进入 Hexo 文件夹（Hexo 文件夹随便放哪里都可以，我放在了软件的安装目录下），依次输入以下指令：</p><h4 id="4-1-1-全局安装-Hexo-的命令行工具-hexo-cli"><a href="#4-1-1-全局安装-Hexo-的命令行工具-hexo-cli" class="headerlink" title="4.1.1 全局安装 Hexo 的命令行工具 hexo-cli"></a>4.1.1 全局安装 Hexo 的命令行工具 hexo-cli</h4><p>输入 <code>npm i hexo-cli -g</code> 结果如下：</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722155303181.png" class="" title="image-20240722155303181"><h4 id="4-1-2-初始化一个新的-Hexo-网站"><a href="#4-1-2-初始化一个新的-Hexo-网站" class="headerlink" title="4.1.2 初始化一个新的 Hexo 网站"></a>4.1.2 初始化一个新的 Hexo 网站</h4><p>输入 <code>hexo init</code> 时出现了报错 <code>bash: hexo: command not found</code>：</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722165501001.png" class="" title="image-20240722165501001"><p>参考了这篇博客<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[解决npm安装Hexo时出现的'bash: hexo: command not found'问题](https://cloud.baidu.com/article/3284918)：解决了 bash: hexo: command not found 的报错。">[2]</span></a></sup>的内容后，发现出现这个报错很有可能是因为没有添加环境变量。使用 <code>npm root -g</code> 查看 npm 全局包的安装路径：</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722170017488.png" class="" title="image-20240722170017488"><p>但此时不要将此路径添加至系统环境变量，而是此路径的上一级文件夹：</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722171942082.png" class="" title="image-20240722171942082"><p>重启 Git Bash（记得用管理员身份运行，其实 <code>hexo init</code>应该不用管理员身份也可以使用，但 [4.1.3](# 4.1.3 安装 Node.js 所需的依赖包) 这一步是必须要用的），用 <code>hexo -v</code> 测试 Hexo 是否能成功使用，发现没问题了！！！</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722172035049.png" class="" title="image-20240722172035049"><p>我的理解是，在 [2. 安装 Node.js ](# 2. 安装 Node.js)中的“修改依赖包存放路径”[111](# 修改依赖包存放路径：)里，用 <code>npm config set prefix &quot;D:\Software\nodejs\node_global&quot;</code> 把全局包的安装路径换到了 <code>D:\Software\nodejs\node_global</code>，所以全局变量必须要加上这个路径。</p><p>此时回到 Hexo 文件夹的路径下，输入 <code>hexo init</code> 结果如下：</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722175512566.png" class="" title="image-20240722175512566"><h4 id="4-1-3-安装-Node-js-所需的依赖包"><a href="#4-1-3-安装-Node-js-所需的依赖包" class="headerlink" title="4.1.3 安装 Node.js 所需的依赖包"></a>4.1.3 安装 Node.js 所需的依赖包</h4><p>输入 <code>npm install</code> 结果如下（这一步也是一定要先用管理员身份运行 Git Bash）：</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722195038353.png" class="" title="image-20240722195038353"><h3 id="4-2-测试页面"><a href="#4-2-测试页面" class="headerlink" title="4.2 测试页面"></a>4.2 测试页面</h3><h4 id="4-2-1-生成静态页面并打开本地服务器"><a href="#4-2-1-生成静态页面并打开本地服务器" class="headerlink" title="4.2.1 生成静态页面并打开本地服务器"></a>4.2.1 生成静态页面并打开本地服务器</h4><p>输入以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 生成静态页面</span><br>hexo g <br><br><span class="hljs-comment"># 打开本地服务器</span><br>hexo s <br></code></pre></td></tr></table></figure><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722205345468.png" class="" title="image-20240722205345468"><h4 id="4-2-2-查看博客"><a href="#4-2-2-查看博客" class="headerlink" title="4.2.2 查看博客"></a>4.2.2 查看博客</h4><p>打开浏览器，输入 <code>http://localhost:4000/</code>，结果如下：</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722205837866.png" class="" title="image-20240722205837866"><h4 id="4-2-3-关闭本地服务器"><a href="#4-2-3-关闭本地服务器" class="headerlink" title="4.2.3 关闭本地服务器"></a>4.2.3 关闭本地服务器</h4><p>输入 <code>Ctrl + C</code> ：</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722210054736.png" class="" title="image-20240722210054736"><h3 id="4-3-设置主题"><a href="#4-3-设置主题" class="headerlink" title="4.3 设置主题"></a>4.3 设置主题</h3><h4 id="4-3-1-安装-Stellar-主题"><a href="#4-3-1-安装-Stellar-主题" class="headerlink" title="4.3.1 安装 Stellar 主题"></a>4.3.1 安装 Stellar 主题</h4><p>输入 <code>npm i hexo-theme-stellar</code>：</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722210548429.png" class="" title="image-20240722210548429"><h4 id="4-3-2-修改-config-yml-文件"><a href="#4-3-2-修改-config-yml-文件" class="headerlink" title="4.3.2 修改 _config.yml 文件"></a>4.3.2 修改 _config.yml 文件</h4><p>来到 Hexo 文件夹，找到 <code>_config.yml</code> 文件，用文本编辑器编辑它。<code>Ctrl + F</code> 搜索 <code>theme</code> 关键字，找到后将其修改为 <code>theme: stellar</code>。</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722210633893.png" class="" title="image-20240722210633893"><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722210758222.png" class="" title="image-20240722210758222"><h4 id="4-3-3-清理缓存、生成静态页面并打开本地服务器"><a href="#4-3-3-清理缓存、生成静态页面并打开本地服务器" class="headerlink" title="4.3.3 清理缓存、生成静态页面并打开本地服务器"></a>4.3.3 清理缓存、生成静态页面并打开本地服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换主题后需要清理缓存</span><br>hexo clean<br><br><span class="hljs-comment"># 生成静态文件</span><br>hexo g <br><br><span class="hljs-comment"># 打开本地服务器</span><br>hexo s <br></code></pre></td></tr></table></figure><p>结果图略，类似[4.2.1 生成静态页面并打开本地服务器](# 4.2.1 生成静态页面并打开本地服务器)。</p><h4 id="4-3-4-查看并关闭博客"><a href="#4-3-4-查看并关闭博客" class="headerlink" title="4.3.4 查看并关闭博客"></a>4.3.4 查看并关闭博客</h4><p>打开浏览器，输入 <code>http://localhost:4000/</code>，结果如下：</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722211541778.png" class="" title="image-20240722211541778"><p>在 Git Bash 中输入 <code>Ctrl + C</code> 关闭本地服务器。</p><h2 id="5-发布到-GitHub-Pages"><a href="#5-发布到-GitHub-Pages" class="headerlink" title="5. 发布到 GitHub Pages"></a>5. 发布到 GitHub Pages</h2><h3 id="5-1-本地-SSH-密钥"><a href="#5-1-本地-SSH-密钥" class="headerlink" title="5.1 本地 SSH 密钥"></a>5.1 本地 SSH 密钥</h3><h4 id="5-1-1-设置-Git-的全局用户名和邮箱"><a href="#5-1-1-设置-Git-的全局用户名和邮箱" class="headerlink" title="5.1.1 设置 Git 的全局用户名和邮箱"></a>5.1.1 设置 Git 的全局用户名和邮箱</h4><p>在 Git Bash 中输入以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 配置用户名和邮箱，注意要填自己的 GitHub 用户名和邮箱</span><br>git config --global user.name <span class="hljs-string">&quot;GitHub 用户名&quot;</span> <span class="hljs-comment"># 你的 GitHub 用户名</span><br>git config --global user.email <span class="hljs-string">&quot;GitHub 注册邮箱&quot;</span> <span class="hljs-comment"># 你的 GitHub 注册邮箱</span><br></code></pre></td></tr></table></figure><p>为了保护隐私，这里不放出结果图（其实也没有输出，所以本身就没什么好看的）。</p><h4 id="5-1-2-生成-SSH-密钥"><a href="#5-1-2-生成-SSH-密钥" class="headerlink" title="5.1.2 生成 SSH 密钥"></a>5.1.2 生成 SSH 密钥</h4><p>输入下面的命令，并连续键入三次回车(即不设置密码)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 生成 ssh 密钥，注意填你自己的 GitHub 邮箱</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;GitHub 注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>结果如下：</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722213450144.png" class="" title="image-20240722213450144"><p>在本地 <code>C:\Users\用户\.ssh</code> 目录下，找到 <code>id_rsa.pub</code>（公钥），用文本编辑器打开并复制内容（如果没有 <code>.ssh</code> 文件夹，可能是被隐藏了，可以试试勾选上面的“隐藏的项目”，但不知道为什么我这里不勾选也有）：</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722223035271.png" class="" title="image-20240722223035271"><h4 id="5-1-3-配置远程SSH"><a href="#5-1-3-配置远程SSH" class="headerlink" title="5.1.3 配置远程SSH"></a>5.1.3 配置远程SSH</h4><p>打开 GitHub 的 Settings，进入 SSH and GPG keys，点击 </p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240723172428465.png" class="" title="image-20240723172428465"><p>Title 随意，Key 里填写 <code>id_rsa.pub</code> 的内容。填写完成后点击 Add SSH key。</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240723172638518.png" class="" title="image-20240723172638518"><h3 id="5-2-新建-GitHub-Pages"><a href="#5-2-新建-GitHub-Pages" class="headerlink" title="5.2 新建 GitHub Pages"></a>5.2 新建 GitHub Pages</h3><p>进入 <a href="https://github.com/">GitHub 官网</a>，创建一个仓库，Repository name 一定要设置为 <code>username.github.io</code>，<code>username</code>就是自己的 GitHub 用户名。</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240722224410634.png" class="" title="image-20240722224410634"><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240723215858832.png" class="" title="image-20240723215858832"><h3 id="5-3-部署博客"><a href="#5-3-部署博客" class="headerlink" title="5.3 部署博客"></a>5.3 部署博客</h3><h4 id="5-3-1-安装-Hexo-的-Git-部署器"><a href="#5-3-1-安装-Hexo-的-Git-部署器" class="headerlink" title="5.3.1 安装 Hexo 的 Git 部署器"></a>5.3.1 安装 Hexo 的 Git 部署器</h4><p>在 Git Bash 中进入 Hexo 文件夹，输入 <code>npm install hexo-deployer-git --save</code> 安装 Git 部署器。</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240723204441513.png" class="" title="image-20240723204441513"><h4 id="5-3-2-修改配置文件"><a href="#5-3-2-修改配置文件" class="headerlink" title="5.3.2 修改配置文件"></a>5.3.2 修改配置文件</h4><p>来到 Hexo 文件夹，找到 <code>_config.yml</code> 文件，用文本编辑器编辑它。找到以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-comment"># 这里填入之前在 GitHub 上创建仓库的完整路径</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:username/username.github.io.git</span> <span class="hljs-comment"># username 就是 GitHub 的用户名，这个是 ssh 协议的地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h4 id="5-3-3-将网站上传到-GitHub-Pages"><a href="#5-3-3-将网站上传到-GitHub-Pages" class="headerlink" title="5.3.3 将网站上传到 GitHub Pages"></a>5.3.3 将网站上传到 GitHub Pages</h4><p>在 Git Bash 中执行一下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d -g <span class="hljs-comment"># 生成静态页面，并发布至远程仓库</span><br><br><span class="hljs-comment"># 等同于下面这两行代码</span><br><span class="hljs-comment">#hexo g</span><br><span class="hljs-comment">#hexo d</span><br><br><span class="hljs-comment"># 实际上，按照官网的教程，在运行 hexo d 前要先运行一下 hexo c，但我这里不运行也没出现啥问题，这里提一句作为记录</span><br></code></pre></td></tr></table></figure><p>再进入仓库 Settings 的 Pages 界面，做以下修改（选完后记得点 Save）：</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240723220456140.png" class="" title="image-20240723220456140"><p>刷新 Pages 页面，会发现出现了 Your site is live at … 的提示。</p><img src="/2024/07/27/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/image-20240723221345215.png" class="" title="image-20240723221345215"><p>此时打开 <code>https://username.github.io</code> 就会发现博客已经部署好，这里就不放展示图啦！</p><h2 id="6-个性化配置"><a href="#6-个性化配置" class="headerlink" title="6. 个性化配置"></a>6. 个性化配置</h2><h3 id="6-1-更换主题"><a href="#6-1-更换主题" class="headerlink" title="6.1 更换主题"></a>6.1 更换主题</h3><p>这里我选择了 <a href="https://github.com/fluid-dev/hexo-theme-fluid?tab=readme-ov-file">Fluid</a> 主题。进入 <code>Hexo</code> 文件夹，打开 Git Bash，运行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>在 <code>Hexo</code> 文件夹里创建 <code>_config.fluid.yml</code> 文件，然后将 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 里的内容复制进去。</p><p>打开 <code>_config.yml</code> 文件，修改 <code>theme</code> 为 <code>theme: fluid</code>，修改 <code>language</code> 为 <code>language: zh-CN</code>。</p><p>在 Git Bash 中进入 <code>Hexo</code> 文件夹，运行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo d -g<br></code></pre></td></tr></table></figure><p>进入博客的页面，发现主题已经改变（可能有一段时间的延迟）。</p><p>剩下的配置还有很多，但 Fluid 的手册里已经阐述的非常详细了，这里不再赘述，详见 <a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a><sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Hexo Fluid 用户手册](https://hexo.fluid-dev.com/docs/)：Hexo Fluid 的官方用户手册，对着这个可以完成 Fluid 主题的基本配置。">[5]</span></a></sup>。</p><h3 id="6-2-不让搜索引擎搜索到你的博客（存疑，ChatGPT-提供的方法，不知真假；两种方法用一种就可以，当然都用更保险）"><a href="#6-2-不让搜索引擎搜索到你的博客（存疑，ChatGPT-提供的方法，不知真假；两种方法用一种就可以，当然都用更保险）" class="headerlink" title="6.2 不让搜索引擎搜索到你的博客（存疑，ChatGPT 提供的方法，不知真假；两种方法用一种就可以，当然都用更保险）"></a>6.2 不让搜索引擎搜索到你的博客（存疑，ChatGPT 提供的方法，不知真假；两种方法用一种就可以，当然都用更保险）</h3><h4 id="6-2-1-使用-robots-txt-文件禁止搜索引擎抓取"><a href="#6-2-1-使用-robots-txt-文件禁止搜索引擎抓取" class="headerlink" title="6.2.1 使用 robots.txt 文件禁止搜索引擎抓取"></a>6.2.1 使用 robots.txt 文件禁止搜索引擎抓取</h4><p>进入 <code>Hexo/source</code> 路径，创建 <code>robots.txt</code> 文件，填入一下内容：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">User-agent</span><span class="hljs-punctuation">: </span>*<br><span class="hljs-attribute">Disallow</span><span class="hljs-punctuation">: </span>/<br></code></pre></td></tr></table></figure><h4 id="6-2-2-在页面中添加noindex元标签"><a href="#6-2-2-在页面中添加noindex元标签" class="headerlink" title="6.2.2 在页面中添加noindex元标签"></a>6.2.2 在页面中添加noindex元标签</h4><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[【2024】从零开始用Hexo+GitHub Pages搭建个人网站（保姆级）](https://zhuanlan.zhihu.com/p/688561305)：搭建过程主要来自于这篇博客。">[1]</span></a></sup>一起看。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/688561305">【2024】从零开始用Hexo+GitHub Pages搭建个人网站（保姆级）</a>：搭建过程主要来自于这篇博客。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://cloud.baidu.com/article/3284918">解决npm安装Hexo时出现的’bash: hexo: command not found’问题</a>：解决了 bash: hexo: command not found 的报错。<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://blog.csdn.net/cat_bayi/article/details/128725230">Hexo教程，看这一篇就够了- How to系列</a>：看这篇博客学了更换主题和一些 Hexo 的基本操作，可以对照着<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://github.com/fluid-dev/hexo-theme-fluid">hexo-theme-fluid</a>：Fluid 的 GitHub 官网。<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a>：Hexo Fluid 的官方用户手册，对着这个可以完成 Fluid 主题的基本配置。<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/07/22/hello-world/"/>
    <url>/2024/07/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
